/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as FilesRouteImport } from './routes/files'
import { Route as EnginesRouteImport } from './routes/engines'
import { Route as AccountsRouteImport } from './routes/accounts'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DatabasesIndexRouteImport } from './routes/databases/index'
import { Route as DatabasesDatabaseIdRouteImport } from './routes/databases/$databaseId'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const FilesRoute = FilesRouteImport.update({
  id: '/files',
  path: '/files',
  getParentRoute: () => rootRouteImport,
} as any)
const EnginesRoute = EnginesRouteImport.update({
  id: '/engines',
  path: '/engines',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountsRoute = AccountsRouteImport.update({
  id: '/accounts',
  path: '/accounts',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DatabasesIndexRoute = DatabasesIndexRouteImport.update({
  id: '/databases/',
  path: '/databases/',
  getParentRoute: () => rootRouteImport,
} as any)
const DatabasesDatabaseIdRoute = DatabasesDatabaseIdRouteImport.update({
  id: '/databases/$databaseId',
  path: '/databases/$databaseId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/accounts': typeof AccountsRoute
  '/engines': typeof EnginesRoute
  '/files': typeof FilesRoute
  '/settings': typeof SettingsRoute
  '/databases/$databaseId': typeof DatabasesDatabaseIdRoute
  '/databases': typeof DatabasesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/accounts': typeof AccountsRoute
  '/engines': typeof EnginesRoute
  '/files': typeof FilesRoute
  '/settings': typeof SettingsRoute
  '/databases/$databaseId': typeof DatabasesDatabaseIdRoute
  '/databases': typeof DatabasesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/accounts': typeof AccountsRoute
  '/engines': typeof EnginesRoute
  '/files': typeof FilesRoute
  '/settings': typeof SettingsRoute
  '/databases/$databaseId': typeof DatabasesDatabaseIdRoute
  '/databases/': typeof DatabasesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/accounts'
    | '/engines'
    | '/files'
    | '/settings'
    | '/databases/$databaseId'
    | '/databases'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/accounts'
    | '/engines'
    | '/files'
    | '/settings'
    | '/databases/$databaseId'
    | '/databases'
  id:
    | '__root__'
    | '/'
    | '/accounts'
    | '/engines'
    | '/files'
    | '/settings'
    | '/databases/$databaseId'
    | '/databases/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountsRoute: typeof AccountsRoute
  EnginesRoute: typeof EnginesRoute
  FilesRoute: typeof FilesRoute
  SettingsRoute: typeof SettingsRoute
  DatabasesDatabaseIdRoute: typeof DatabasesDatabaseIdRoute
  DatabasesIndexRoute: typeof DatabasesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/files': {
      id: '/files'
      path: '/files'
      fullPath: '/files'
      preLoaderRoute: typeof FilesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/engines': {
      id: '/engines'
      path: '/engines'
      fullPath: '/engines'
      preLoaderRoute: typeof EnginesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/accounts': {
      id: '/accounts'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof AccountsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/databases/': {
      id: '/databases/'
      path: '/databases'
      fullPath: '/databases'
      preLoaderRoute: typeof DatabasesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/databases/$databaseId': {
      id: '/databases/$databaseId'
      path: '/databases/$databaseId'
      fullPath: '/databases/$databaseId'
      preLoaderRoute: typeof DatabasesDatabaseIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountsRoute: AccountsRoute,
  EnginesRoute: EnginesRoute,
  FilesRoute: FilesRoute,
  SettingsRoute: SettingsRoute,
  DatabasesDatabaseIdRoute: DatabasesDatabaseIdRoute,
  DatabasesIndexRoute: DatabasesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
